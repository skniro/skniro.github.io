<!DOCTYPE HTML>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
 <meta name="generator" content="Adobe RoboHelp 2015" />
<title>例：スクリプト側での新しいコマンドの実装</title>
<link rel="StyleSheet" href="default.css" type="text/css" />
<script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style>

<script type="text/javascript" src="template/scripts/rh.min.js"></script>
<script type="text/javascript" src="template/scripts/common.min.js"></script>
<script type="text/javascript" src="template/scripts/topic.min.js"></script>
<script type="text/javascript" src="template/scripts/constants.js"></script>
<script type="text/javascript" src="template/scripts/utils.js"></script>
<script type="text/javascript" src="template/scripts/mhutils.js"></script>
<script type="text/javascript" src="template/scripts/mhlang.js"></script>
<script type="text/javascript" src="template/scripts/mhver.js"></script>
<script type="text/javascript" src="template/scripts/settings.js"></script>
<script type="text/javascript" src="template/scripts/XmlJsReader.js"></script>
<script type="text/javascript" src="template/scripts/loadparentdata.js"></script>
<script type="text/javascript" src="template/scripts/loadscreen.js"></script>
<script type="text/javascript" src="template/scripts/loadprojdata.js"></script>
<script type="text/javascript" src="template/scripts/mhtopic.js"></script>
 <link rel="stylesheet" type="text/css" href="template/styles/topic.min.css">
<script type="text/javascript" >
gRootRelPath = ".";
gCommonRootRelPath = ".";
gTopicId = "5.2.1.1.0_3";
</script>
 <meta name="topic-breadcrumbs" content="スクリプトとプラグインのリファレンス > エクステンションに関するドキュメンテーション > はじめに > 実例" />
</head>

<body>
<script type="text/javascript" src="./ehlpdhtm.js"></script>

<div style="width: 100%; position: relative;" id="header">
	<p class="Topic_Heading">例：スクリプト側での新しいコマンドの実装</p>
</div>
<p><br />
前回の例では、エディターに新しいシーンコマンドを追加しました。ところが、そのロジックをまだ実装していないので、今の時点でこのシーンコマンドを使ったとしてもゲームには何の効果もありません。</p>
<p>コマンドのロジックを実装するには、「表示」 &rarr; 「スクリプト」を開く必要があります。</p>
<p>&#160;</p>
<p>スクリプトエディタには、ビジュアルノベルエンジンを定義するすべての編集可能なゲームスクリプトが含まれています。詳しくは、「<a href="GameScript_Getting_Started.htm">スクリプトに関するドキュメンテーション</a>」を参照してください。</p>
<p>今回の場合、コマンドインタプリタを修正して新しいコマンドを処理できるようにする必要があります。コマンドインタプリタは、「Components」 
 &rarr; 「Component_CommandInterpreter」で</p>
<p>見つけることができます。今回はスクリプトを直接修正するのではなく、新しいフォルダーでスクリプトを新たに作成するので、</p>
<p>「コンポーネント」フォルダーの中に「カスタム」フォルダーを新たに作成し、新しいスクリプトの「Component_CommandInterpreterCardExtension」を追加します。</p>
<p>では、次のスクリプトコードを挿入しましょう。</p>
<p>&#160;</p>
<p><span class="Code">class Component_CommandInterpreterCardExtension extends 
 gs.Component_CommandInterpreter</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;constructor: () -&gt;</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;super()</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;# We need to override this 
 method to assign our command function to</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;# the command.</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;assignCommand: (command) 
 -&gt;</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;super(command)</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;switch 
 command.id</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;when 
 &quot;ext.ShowCard&quot; then command.execute = @commandExtShowCard</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;# Our method to handle the 
 commands logic. &#160;&#160;&#160;&#160;&#160;</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;commandExtShowCard: -&gt;</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;card 
 = RecordManager.cards[@interpreter.numberValueOf(@params.cardId)]</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x 
 = @interpreter.numberValueOf(@params.position.x)</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;y 
 = @interpreter.numberValueOf(@params.position.y)</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;console.log(&quot;Show 
 Card executed!&quot;)</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;console.log(&quot;Card: 
 #{card.name}&quot;)</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;console.log(&quot;Position: 
 #{x}, #{y}&quot;)</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;# 
 Command Logic...</span></p>
<p>&#160;</p>
<p><span class="Code"># This line is very important, we are overriding 
 the current default class with our own</span></p>
<p><span class="Code"># implementation. So multiple extensions can add 
 new commands independent from each other.</span></p>
<p><span class="Code">gs.Component_CommandInterpreter = Component_CommandInterpreterCardExtension</span></p>
<p>&#160;</p>
<p>この時点で新しいコマンドをシーンで使用すると、次のようなコードがゲームのデバッグコンソール（F12またはoption+cmd+i）に表示されます。</p>
<p>&#160;</p>
<p><span class="Code">Show Card executed!</span></p>
<p><span class="Code">Card: My Card</span></p>
<p><span class="Code">Position: 10, 10</span></p>
<p>&#160;</p>
<p>インタプリタによって新しいコマンドが処理されたのがわかります。後はコマンドのロジックに対処し、カードの画像を画面に表示するだけです。</p>
<p>ただし、このガイドではできるだけ簡単に説明するため、そこまでは扱いません。</p>
</body>
</html>
