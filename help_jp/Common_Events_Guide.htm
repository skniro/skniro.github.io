<!DOCTYPE HTML>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
 <meta name="generator" content="Adobe RoboHelp 2015" />
<title>共通イベント</title>
<link rel="StyleSheet" href="default.css" type="text/css" />
<script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style>

<script type="text/javascript" src="template/scripts/rh.min.js"></script>
<script type="text/javascript" src="template/scripts/common.min.js"></script>
<script type="text/javascript" src="template/scripts/topic.min.js"></script>
<script type="text/javascript" src="template/scripts/constants.js"></script>
<script type="text/javascript" src="template/scripts/utils.js"></script>
<script type="text/javascript" src="template/scripts/mhutils.js"></script>
<script type="text/javascript" src="template/scripts/mhlang.js"></script>
<script type="text/javascript" src="template/scripts/mhver.js"></script>
<script type="text/javascript" src="template/scripts/settings.js"></script>
<script type="text/javascript" src="template/scripts/XmlJsReader.js"></script>
<script type="text/javascript" src="template/scripts/loadparentdata.js"></script>
<script type="text/javascript" src="template/scripts/loadscreen.js"></script>
<script type="text/javascript" src="template/scripts/loadprojdata.js"></script>
<script type="text/javascript" src="template/scripts/mhtopic.js"></script>
 <link rel="stylesheet" type="text/css" href="template/styles/topic.min.css">
<script type="text/javascript" >
gRootRelPath = ".";
gCommonRootRelPath = ".";
gTopicId = "3.1.0_10";
</script>
 <meta name="topic-breadcrumbs" content="ビギナーズガイド > 基礎を学ぶ" />
</head>

<body>
<script type="text/javascript" src="./ehlpdhtm.js"></script>

<p class="Topic_Heading">共通イベント</p>
<p>&#160;</p>
<p><span class="Topic_Start">こ</span>のチュートリアルでは、いわゆる<a href="Common_Events.htm">共通イベント</a>について説明します。共通イベントは<a 
	 href="Database.htm">データベース</a>の中にあります。より複雑なビジュアルノベルを制作するとき、とても頻繁に使うことになる項目です。ゲームを制作中、とある要素やコマンドなどがいくつものシーンで必要になるため、何度もコピー&amp;ペーストしなければならないケースが出てきます。</p>
<p>&#160;</p>
<p>ゲーム制作に慣れてくると、例えば大きなブロック状の長いコマンドをコピー&amp;ペーストするような作業が煩わしくなってきます。少しの変更箇所でも全シーンを見直してすべて修正しなくてはならないからです。もちろん、<a 
	 href="Mass_Edit.htm">一括編集</a>や大量の<a href="Learning_about_Switches.htm">変数</a>を使って効率化することもできますが、それにしてもかなりの労力が必要です。</p>
<p>&#160;</p>
<p>この問題に対処するため、「ラノゲツクールMV」では共通イベントを使います。よく使うコマンドに名前を付け、「<a href="System_Command.htm#Call_Common_Event">共通イベントを呼び出す</a>」コマンドで呼び出すことで、いつでもどこからでもそのコマンドが実行できるようになるのです。次のセクションで詳しく見てみましょう。</p>
<p>&#160;</p>
<p class="Sub_Heading">ゲーム内でよく使われる要素を検討</p>
<p>&#160;</p>
<p>今あなたが制作中のゲームでは、キャラクターはお金を持っていて、それがゲームの重要な要素のひとつだとします。そこで、特定のシーンでは画面右上にキャラクターの所持金を表示したいと仮定しましょう。金額を設定するには、グローバル数値変数を使います。その変数を「Money」と呼ぶことにしましょう。</p>
<p>&#160;</p>
<p>シーンのひとつで次のコマンドを使い、簡単に画面に金額を表示したり、後から金額を非表示にしたりすることができます。</p>
<p>&#160;</p>
<p><img src="image75.gif" alt="" style=" border:none; width:100%; max-width:1092px;" border="0" /></p>
<p><img src="image76.gif" alt="" style=" border:none; width:100%; max-width:1092px;" border="0" /></p>
<p>&#160;</p>
<p>ひとまずはこの例のとおりで良いでしょう。次に、以下のように追加します。</p>
<p>&#160;</p>
<p><img src="image79.gif" alt="" style=" border:none; width:100%; max-width:1092px;" border="0" /></p>
<p>&#160;</p>
<p>これで背景のボックスを表示し、その上に金額が出ようになりました。次のコマンドを使えば非表示にすることもできます。</p>
<p>&#160;</p>
<p><img src="image77.gif" alt="" style=" border:none; width:100%; max-width:1092px;" border="0" /></p>
<p>&#160;</p>
<p>さて、このシーンだけでなく他のシーンでも金額を表示または非表示にしたい場合はどうしましょう？対象となるシーンすべてにコピー&amp;ペースト？…それだと、後から金額の表示アニメーションや挙動を変更したくなった時に、対象となるシーンをすべて修正しなければならなくなります。そこで、この共通イベントの出番です。共通イベントでは、こうしたケースを効率的に解決できるのです。さっそく使ってみましょう。</p>
<p>&#160;</p>
<p>&#160;</p>
<p class="Sub_Heading">共通イベントの作成</p>
<p>&#160;</p>
<p>上のイベント例を見ると、よく使う要素が2つあることがわかります。</p>
<p>&#160;</p>
<p>1. 現在の所持金を表示する</p>
<p>&#160;</p>
<p><img src="image80.gif" alt="" style=" border:none; width:100%; max-width:1092px;" border="0" /></p>
<p>&#160;</p>
<p>2. 現在の所持金を非表示にする</p>
<p>&#160;</p>
<p><img src="image77.gif" alt="" style=" border:none; width:100%; max-width:1092px;" border="0" /></p>
<p>&#160;</p>
<p>データベースを開き、この2つの新しい共通イベント、「金額を表示」と「金額を非表示」を共通イベント内に作成しましょう。</p>
<p>&#160;</p>
<p><img src="CreateTwoCE.PNG" alt="" style=" border:none; width:100%; max-width:272px;" border="0" /></p>
<p>&#160;</p>
<p>「金額を表示」共通イベントから始めましょう。</p>
<p>&#160;</p>
<p><img src="ShowMoneyCode.pnb.PNG" alt="" style=" border:none; width:100%; max-width:1092px;" border="0" /></p>
<p>&#160;</p>
<p>まず、「<a href="Picture.htm#Show_Picture">ピクチャーを表示</a>」で画面の右上にボックスのイメージを表示します。このイメージが金額表示の背景になります。使用するイメージは以下のものです。</p>
<p>&#160;</p>
<p><img src="ui_back.png" alt="" style=" border:none; width:100%; max-width:341px;" border="0" /></p>
<p>&#160;</p>
<p>次に、「<a href="Text.htm#Show_Text">テキストを表示</a>」で背景のボックスの上に金額を表示します。<a 
	 href="Message.htm#Text_Codes">テキストコード</a>「{GN:1}」を使って、キャラクターの所持金を含むグローバル数値変数1の値を画面上に表示します。これだけでOKです。</p>
<p>&#160;</p>
<p>今度は「金額を非表示」の共通イベントを見てみましょう。</p>
<p>&#160;</p>
<p><img src="HideMoneyCode.png" alt="" style=" border:none; width:100%; max-width:1092px;" border="0" /></p>
<p>&#160;</p>
<p>こちらは単にテキストとピクチャーを消すだけです。</p>
<p>&#160;</p>
<p>さてそれでは、完成した共通イベントをシーンの中で使ってみましょう。</p>
<p>&#160;</p>
<p>&#160;</p>
<p class="Sub_Heading">共通イベントの呼び出し</p>
<p>&#160;</p>
<p>シーンに戻って、コピー&amp;ペーストしたコマンドの個所を、作成した共通イベントを呼び出すように変えましょう。</p>
<p>&#160;</p>
<p><img src="image81.gif" alt="" style=" border:none; width:100%; max-width:1092px;" border="0" /></p>
<p><img src="CE_ExampleCode_1.PNG" alt="" style=" border:none; width:100%; max-width:1092px;" border="0" /></p>
<p>&#160;</p>
<p>ご覧のように「<a href="System_Command.htm#Call_Common_Event">共通イベントを呼び出す</a>」コマンドで共通イベントを呼び出しています。共通イベントを呼び出すとその中にあるコマンドが実行され、シーンはその共通イベントが完了し、全てのコマンドを実行し終わるまで待機します。さらに高度な設定や異なる呼び出し方法もあるので、共通イベントを使用して設定してみましょう。</p>
<p>&#160;</p>
<p>これで、表示と非表示の機能がデータベースに追加されたので、金額のアニメーションの表示や非表示を変更したい時には、この共通イベントだけを編集するだけで良いようになりました。すべてのシーンを調整する必要はもうありません。</p>
<p>&#160;</p>
<p class="Sub_Heading">並列共通イベント</p>
<p>&#160;</p>
<p>コマンドをその都度コピー＆ペーストするという方法の代わりに、「共通イベントを呼び出す」という機能とそのやり方を学びました。今回は新しいタイプの共通イベント「並列共通イベント」または単に「並列処理」と呼ばれる共通イベントについて説明します。</p>
<p>&#160;</p>
<p>並列共通イベントは、恋愛シミュレーションゲームなどのように、より複雑なビジュアルノベルで必要となる特定のバックグラウンドタスクのために使用されます。並列共通イベントは、現在のシーンからは独立したバックグラウンドで実行されます。直接呼び出す必要はなく、実行されるための条件が合っている限り永遠にループして自動的に実行されます。</p>
<p>&#160;</p>
<p>試してみましょう。シンプルな昼間と夜の経過をシミュレーションします。一定の時間が経つと、夜になったように見せるため画面を紺青色にし、またしばらく経過したら通常の色に戻します。では「昼/夜シミュレーション」という新しい共通イベントを作成しましょう。</p>
<p>&#160;</p>
<p><img src="CE_DayNight.png" alt="" style=" border:none; width:100%; max-width:526px;" border="0" /></p>
<p>&#160;</p>
<p>ここでは、「トリガー」を「呼び出し」ではなく「自動」に設定していることがわかります。「自動」を選べば、いちいち呼び出さなくても自動で共通イベントを開始することができます。また、「並列実行」のチェックボックスを選択し、共通イベントがシーンを妨げることなく並行して実行されるようにします。</p>
<p>&#160;</p>
<p>さらに、次のコマンドを追加しましょう。</p>
<p>&#160;</p>
<p><img src="DayNightCE_Code.png" alt="" style=" border:none; width:100%; max-width:942px;" border="0" /></p>
<p>&#160;</p>
<p>見てわかるように、まず「<a href="Basic.htm#Wait">ウェイト</a>」コマンドを使って60.000ミリ秒（1分間）待ちます。共通イベントは並行して実行されるので、シーンはこれによって中断されることはありません。ウェイト時間が終了したら、夜のような効果を出すため「<a href="Screen.htm#Tint_Screen">画面を色付け</a>」コマンドを使い、画面をゆっくり紺青の夜の色に変えます。</p>
<p>&#160;</p>
<p>画面の色が変わったら、画面は夜らしくなります。次はまた「<a href="Basic.htm#Wait">ウェイト</a>」コマンドを使用して60.000ミリ秒まちます。その後、「<a 
	 href="Screen.htm#Tint_Screen">画面を色付け</a>」コマンドを使い、通常の日中を表す画面へと戻します。</p>
<p>&#160;</p>
<p>今の時点でこのゲームをテストするとしたら、どのシーンから始めたとしても1分後に画面は暗くなり、さらに1分のウェイト時間を経て通常の画面に戻るようになります。並列共通イベントは永遠にループするので、このサイクルはずっと繰り返されます。共通イベントには何の条件も設定していないので、止まることなくずっと実行され続けます。</p>
<p>&#160;</p>
<p>手動で並列共通イベントを止めるには、「<a href="System_Command.htm#Call_Common_Event">共通イベントを終了</a>」コマンドを使います。このコマンドは、即時的に共通イベントの実行を止めますが、状態をリセットするわけではありません。ただし、トリガーが「自動」になっており、条件が定義されていない場合、共通イベントはすぐに実行を再スタートします。停止させた共通イベントを再開させるには、「<a 
	 href="System_Command.htm#Resume_Common_Event">共通イベントを再開</a>」コマンドを使用します。このコマンドは、共通イベントが停止された時点から共通イベントの実行を再開します。共通イベントの条件が真（true）でなくてもそのように機能します。データベースの共通イベントを見ていただくと、トリガーが「呼び出し」になっていても、「並列実行」にチェックを入れることが可能であることが分かります。この場合、「共通イベントを呼び出す」を使うと、その共通イベントはシーンと並行し、バックグラウンドで実行されます。…つまり、シーンの続行を妨ぐことがないのです</p>
<p>&#160;</p>
<p>&#160;</p>
<p class="Sub_Heading">パラメータ付き共通イベント</p>
<p>&#160;</p>
<p>最初の例で、よく使うコマンドを毎回コピー&amp;ペーストするのではなく、共通イベントを呼び出す方法について学びました。効果的な手段ではありますが、今回はそれよりさらにもう一歩踏み込み、いわゆる「パラメータ」が付いた共通イベントを呼び出します。パラメータ付きの共通イベントは、特定の値を持つプレースホルダーを置くための共通イベントのテンプレートと考えることができます。これらのプレースホルダーもまた「パラメータ」と呼ばれ、呼び出される時には実際の値に置き換えられます。ですので、共通イベントを呼び出す際、これらのプレースホルダーにどの値を入れるか指定できます。</p>
<p>&#160;</p>
<p>これは、ほとんど同じ内容だけれど、それぞれのシーンでピクチャーIDや位置、長さの値など、わずかな変更点があるというような共通イベントを作成する際に便利です。ほぼ同じロジックなのに、少しの変更点がある共通イベントが10個あるとしたら、コピー&amp;ペーストでは10か所変更しなければならないからです。</p>
<p>&#160;</p>
<p>もちろん、グローバル変数をたくさん作って、共通イベントの中からアクセスすることもできます。ですが、100や1000にも達するような量の共通イベントを使う大きなプロジェクトに取り組むときに問題になります。最終的に1000を超えるそれぞれ異なるグローバル変数が必要になってしまい、ゲームの構造を矛盾なく保持したり、バグを直しながら全体像を把握するのが難しくなります。</p>
<p>&#160;</p>
<p>そのような事態を避けるため、「ラノゲツクールMV」ではパラメータ付き共通イベントを使うことができます。次はこの機能を試してみましょう！このゲームでは、各メインキャラクターはお金を持っていて、シーンによって特定のキャラクターの所持金を表示したいと考えるとします。そのためには、どのキャラクターかを指定すればその後共通イベントがそのキャラクターの所持金を画面の右上に表示するような、パラメータ付き共通イベントを1つ用いて対処します。</p>
<p>&#160;</p>
<p>では、データベースでメインキャラクターにパラメータを与えましょう。</p>
<p>&#160;</p>
<p><img src="CE_CharacterParameters.PNG" alt="" style=" border:none; width:100%; max-width:296px;" border="0" /></p>
<p>&#160;</p>
<p>キャラクターのパラメータについて詳しくは、「<a href="Characters.htm">キャラクター</a>」のページを参照してください。</p>
<p>&#160;</p>
<p>次に、先ほどの例で見た「金額を表示」共通イベントを少しだけ変更してみましょう。「パラメータ」というセクションがあります。</p>
<p>&#160;</p>
<p><img src="CE_Parameters.png" alt="" style=" border:none; width:100%; max-width:379px;" border="0" /></p>
<p>&#160;</p>
<p>ここで、共通イベント向けのパラメータをすべて設定できます。設定可能なパラメータがたくさんありますが、今回はとてもシンプルに行きましょう。というわけで、必要なのはテキストパラメータであるキャラクターIDのみです。&lt;新規&gt;をダブルクリックして追加しましょう。</p>
<p>&#160;</p>
<p><img src="CE_ParameterSetting.png" alt="" style=" border:none; width:100%; max-width:688px;" border="0" /></p>
<p>&#160;</p>
<p>パラメータの値は、共通イベントのローカル変数を介して共通イベントへと受け渡されます。テキストの値（キャラクターのID）を受け渡したい場合、「テキスト」を選択し、後から参照できるように、そのキャラクターIDをどこに格納するか指定するため、共通イベントのローカル数値変数を作成します。2つ目の選択ボックスでは、「テキスト値」ではなく「キャラクター」を選択します。「キャラクター」を選ぶと、「共通イベントを呼び出す」コマンドを追加した際に、パラメータ入力欄ではなく、キャラクターの選択欄が表示されるようになります。</p>
<p>&#160;</p>
<p>&#160;</p>
<p><img src="CE_ParametersOne.png" alt="" style=" border:none; width:100%; max-width:394px;" border="0" /></p>
<p>&#160;</p>
<p>今度は共通イベントのコマンドを少し変更してみましょう。</p>
<p>&#160;</p>
<p><img src="CE_Parameterized.png" alt="" style=" border:none; width:100%; max-width:989px;" border="0" /></p>
<p>&#160;</p>
<p>まず「<a href="Character.htm#Get_Parameter">パラメータを取得</a>」コマンドを使用して、パラメータとして受け渡されたキャラクターの所持金を取得し、それをローカル数値変数0002「所持金」に格納します。キャラクターを直接選択するのではなく、変数によって算出し、キャラクターIDを含めたパラメータであるローカル数値変数0001「キャラクターID」を使用します。この時のポイントは、必要となるパラメーターをすでに追加しているキャラクターを選択し、あらかじめパラメータ「所持金」を選択した後に、そのローカル変数に変更することです。そうしないと、パラメータ欄が空のままになってしまいます。</p>
<p>&#160;</p>
<p>次に、「ピクチャーを表示」を追加した後、「<a href="Text.htm#Show_Text">テキストを表示</a>」 で「{LN:2}」を利用し、キャラクターの共通イベントローカル数値変数0002「所持金」の内容を表示します。以上です。この作業をすべて終えたら、プロジェクトを保存してシーンに戻りましょう。</p>
<p>&#160;</p>
<p><img src="CE_ExampleCode_2.PNG" alt="" style=" border:none; width:100%; max-width:1090px;" border="0" /></p>
<p><img src="CE_ExampleCode_2_2.PNG" alt="" style=" border:none; width:100%; max-width:1090px;" border="0" /></p>
<p>&#160;</p>
<p>「共通イベントを呼び出す」コマンドを見ると、「キャラクター:」という2つ目のフィールドがあります。</p>
<p>&#160;</p>
<p><img src="image84.gif" alt="" style=" border:none; width:100%; max-width:1090px;" border="0" /></p>
<p>&#160;</p>
<p>これをクリックすると、共通イベントのパラメータ値を指定できる選択ボックスが表示されます。</p>
<p>&#160;</p>
<p><img src="CallParameters.png" alt="" style=" border:none; width:100%; max-width:668px;" border="0" /></p>
<p>&#160;</p>
<p>パラメータ設定で「キャラクター」を選択したので、数値フィールドにはキャラクター選択ボックスが表示されます（必要となるパラメータを追加していないキャラクターもリストアップされますので注意してください）。これにより、キャラクターの選択が容易になります。後は、任意のキャラクターを選ぶか、「...」ボタンをクリックし、変数でパラメータの数値を算出すればいいだけです。「共通イベントを呼び出す」コマンドのパラメータの値を指定した後、もう一度ゲームをテストして、以前のように動くかどうか確認します。</p>
<p>&#160;</p>
<p>もし、僅かな変更点のために共通イベントを複製することになった場合、パラメータ付き共通イベントで問題を解決できないか検討してみるといいでしょう。</p>
<p>&#160;</p>
<p>&#160;</p>
<p class="Sub_Heading">インライン共通イベント</p>
<p>&#160;</p>
<p>データベースで共通イベントを作成する際、右上の「Inline」（インライン）のチェックボックスをオンにすることができます（既定ではオフ）。</p>
<p>&#160;</p>
<p><img src="image73.gif" alt="" style=" border:none; width:100%; max-width:1087px;" border="0" /></p>
<p>&#160;</p>
<p>&#160;</p>
<p>共通イベントがインラインとしてマークされている場合：</p>
<p>&#160;</p>
<p><img src="image74.gif" alt="" style=" border:none; width:100%; max-width:92px;" border="0" /></p>
<p>&#160;</p>
<p>その共通イベントのコマンドはコピーされ、ランタイムに「共通イベントを呼び出す」コマンドの位置で、シーンにペーストされます。共通イベントを呼び出すという動作は、ただコマンドのブロックをコピー&amp;ペーストするよりも少しコストがかかるので、場合によってはインライン共通イベントでスピードアップを図ることができます。</p>
<p>&#160;</p>
<p>インライン共通イベントのコマンドはランタイムにコピー&amp;ペーストされるので、余分なパフォーマンスコストはかかりません。しかしながら、こうした最適化にはいくつかデメリットもあります。</p>
<p>&#160;</p>
<ul style="list-style: disc;">
	<li>コマンドはランタイムにただコピー&amp;ペーストされるので、インライン共通イベントで使用されるローカル変数はシーン/ルートのローカル変数を参照します。ですのでもしどのローカル変数を使用すべきか分からなくなったら、コマンドをただコピー&amp;ペーストした場合何が起きるかを考えてみましょう。</li>
</ul>
<ul style="list-style: disc;">
	<li>パラメータを使用すると、共通イベントはインラインにできません。</li>
	<li>共通イベントに直接的または間接的な再帰処理が含まれている場合、または共通イベントあるいはそのサブ呼び出しが同じ共通イベントを再び呼び出すことがある場合 
	 インラインにはできません。</li>
</ul>
<p>&#160;</p>
<p>おおむね、インライン共通イベントは1つのループで1万回も呼び出されるなど、非常に頻繁に呼び出される場合に便利です。そうでなければあまり意味はありません。通常の共通イベントの呼び出しは非常に少ないコストで実行できる動作だからです。</p>
<p>&#160;</p>
<p>&#160;</p>
<p class="Sub_Heading">シングルインスタンス vs マルチインスタンス</p>
<p>&#160;</p>
<p>データベースの各共通イベントに「Single Instance」（シングルインスタンス）チェックボックスがあり、既定では常にオンになっています。</p>
<p>&#160;</p>
<p><img src="image73.gif" alt="" style=" border:none; width:100%; max-width:1087px;" border="0" /></p>
<p>&#160;</p>
<p>共通イベントが「Single Instance」（シングルインスタンス）に設定されている場合、そのローカル変数の状態はリセットされません。つまり、すべてのローカル変数の値は、前回の呼び出たときのまま残るということです。これは、あなたが実装したいことによってはメリットになります。さらに、何回呼び出そうが、その共通イベントのコマンドインタプリタは1つのみです。そのため、再帰の呼び出しまたは並列の呼び出しが実行され、それによってゲーム内にバグを引き起こすようなことはありえないということです。</p>
<p>&#160;</p>
<p>通常の場合は、シングルインスタンスを使用すれば問題はありません。ですが、イベントをいくつも並列で呼び出す場合、または直接的または別の共通イベント経由で間接的に共通イベントが自らを呼び出す場合、マルチインスタンスを許可することも視野に入ってきます。その場合「Single 
 Instance」（シングルインスタンス）のチェックボックスを外し、並列または通常の共通イベントの各呼び出しで独自のローカル変数とコマンドインタプリタを持つ新しい独自のインスタンスを生成します。</p>
<p>&#160;</p>
<p class="Sub_Heading">パフォーマンス</p>
<p>&#160;</p>
<p>共通イベントを使用する際、「ラノゲツクールMV」はその共通イベントを最適化しようとします。ただし、次の点を覚えておくようにしましょう。</p>
<p>&#160;</p>
<ul style="list-style: disc;">
	<li>パラメータ付き共通イベントを呼び出す場合、シーンで直接コマンドのブロックを実行したり、インラインコマンドイベントを使用するよりも少しだけパフォーマンスにコストがかかります。ほんの少しだとしても、パラメータ付き共通イベントをループで1万回呼び出すとしたら、場合によってはパフォーマンスに影響します。</li>
</ul>
<ul style="list-style: disc;">
	<li>並列共通イベントを作成する場合、その共通イベントはシーンと並列してバックグラウンドで実行されるということを覚えておきましょう。これはつまり、並列共通イベントが多ければそれだけパフォーマンスにコストがかかることを意味します。</li>
</ul>
<ul style="list-style: disc;">
	<li>「並列実行」、「Single Instance」（シングルインスタンス）がオフの状態の共通イベントについて、「共通イベントを呼び出す」を使用する場合、シーンと並列して実行される新しい独立したインスタンスが作成されます。つまり、ループで1万回呼び出すと、1万個のの新しいインスタンスが生成され場合によってはパフォーマンスに影響します。</li>
</ul>
<ul style="list-style: disc;">
	<li>共通イベントの「Inline」（インライン）チェックボックスをオンにすると、ランタイムでコマンドがシーンにコピー&amp;ペーストされます。そのためそのような場合ではその呼び出しに対するパフォーマンスのオーバーヘッドはありません。ただし、パラメータ付き共通イベントや再帰処理ではそのように機能しません。</li>
</ul>
<p>&#160;</p>
</body>
</html>
