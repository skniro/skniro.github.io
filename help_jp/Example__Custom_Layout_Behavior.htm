<!DOCTYPE HTML>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
 <meta name="generator" content="Adobe RoboHelp 2015" />
<title>例：カスタムのレイアウト動作</title>
<link rel="StyleSheet" href="highlight/styles/default.css" type="text/css" />
<link rel="stylesheet" href="highlight/styles/default.css" type="text/css" />
<script src="highlight/highlight.pack.js" type="text/javascript"></script>
<script type="text/javascript">//<![CDATA[
hljs.initHighlightingOnLoad();
//]]></script>
<script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style>

<script type="text/javascript" src="template/scripts/rh.min.js"></script>
<script type="text/javascript" src="template/scripts/common.min.js"></script>
<script type="text/javascript" src="template/scripts/topic.min.js"></script>
<script type="text/javascript" src="template/scripts/constants.js"></script>
<script type="text/javascript" src="template/scripts/utils.js"></script>
<script type="text/javascript" src="template/scripts/mhutils.js"></script>
<script type="text/javascript" src="template/scripts/mhlang.js"></script>
<script type="text/javascript" src="template/scripts/mhver.js"></script>
<script type="text/javascript" src="template/scripts/settings.js"></script>
<script type="text/javascript" src="template/scripts/XmlJsReader.js"></script>
<script type="text/javascript" src="template/scripts/loadparentdata.js"></script>
<script type="text/javascript" src="template/scripts/loadscreen.js"></script>
<script type="text/javascript" src="template/scripts/loadprojdata.js"></script>
<script type="text/javascript" src="template/scripts/mhtopic.js"></script>
 <link rel="stylesheet" type="text/css" href="template/styles/topic.min.css">
<script type="text/javascript" >
gRootRelPath = ".";
gCommonRootRelPath = ".";
gTopicId = "5.3.1.0_9";
</script>
 <meta name="topic-breadcrumbs" content="スクリプトとプラグインのリファレンス > ゲーム内UIに関するドキュメンテーション > はじめに" />
</head>

<body>
<script type="text/javascript" src="./ehlpdhtm.js"></script>

<div style="width: 100%; position: relative;" id="header">
 <p class="Topic_Heading">例：カスタムのレイアウト動作</p>
</div>

<p>&#160;</p>
<p>特定の理由により、特定のゲーム内UIのレイアウトを完全にコントロールしなければならない場合があります。<br />
これらの場合は、カスタムのレイアウト動作コンポーネントを作成し、gs.Component_LayoutSceneBehaviorから継承することができます。</p>
<p>&#160;</p>
<p><span style="font-weight: bold;">メモ：</span>カスタムのレイアウト動作を実装する場合は、先に「<a 
	 href="Scripter_s_Guide.htm">スクリプターのガイド</a>」のページを読むことをお勧めします。</p>
<p>&#160;</p>
<pre>
<code class="coffee">
class Component_CustomLayoutBehavior extends gs.Component_LayoutSceneBehavior
&#160;&#160;&#160;&#160;###*
&#160;&#160;&#160;&#160;* An example of how to create your own custom layout behavior to take full control
&#160;&#160;&#160;&#160;* over the in-game ui scene.
&#160;&#160;&#160;&#160;*
&#160;&#160;&#160;&#160;* @module gs
&#160;&#160;&#160;&#160;* @class Component_CustomLayoutBehavior 
&#160;&#160;&#160;&#160;* @extends gs.Component_LayoutSceneBehavior
&#160;&#160;&#160;&#160;* @memberof gs
&#160;&#160;&#160;&#160;###
&#160;&#160;&#160;&#160;constructor: -&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;super
&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;###*
&#160;&#160;&#160;&#160;* Initializes the in-game ui scene. 
&#160;&#160;&#160;&#160;*
&#160;&#160;&#160;&#160;* @method initialize
&#160;&#160;&#160;&#160;### 
&#160;&#160;&#160;&#160;initialize: -&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;super
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;###*
&#160;&#160;&#160;&#160;* Prepares all visual game objects for the scene.
&#160;&#160;&#160;&#160;*
&#160;&#160;&#160;&#160;* @method prepareVisual
&#160;&#160;&#160;&#160;### 
&#160;&#160;&#160;&#160;prepareVisual: -&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;super
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;# Easily access your UI game objects and do what you want with them.
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;@myUiObject = gs.ObjectManager.current.objectById(&quot;myUiObject&quot;)
&#160;&#160;&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;###*
&#160;&#160;&#160;&#160;* Prepares all data for the scene and loads the necessary graphic and audio resources.
&#160;&#160;&#160;&#160;*
&#160;&#160;&#160;&#160;* @method prepareData
&#160;&#160;&#160;&#160;### &#160;&#160;
&#160;&#160;&#160;&#160;prepareData: -&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;super
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;###*
&#160;&#160;&#160;&#160;* Update the scene's content. Here you can implement any kind of additional logic
&#160;&#160;&#160;&#160;* you want.
&#160;&#160;&#160;&#160;*
&#160;&#160;&#160;&#160;* @method updateContent
&#160;&#160;&#160;&#160;### 
&#160;&#160;&#160;&#160;updateContent: -&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;super
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
gs.Component_CustomLayoutBehavior = Component_CustomLayoutBehavior </code></pre>
<p>特定のレイアウトでカスタムのレイアウト動作を使用する場合は、「コンポーネント」プロパティを使用し、コンポーネントクラスを指定してそのレイアウトを使用することができます。</p>
<p>&#160;</p>
<p style="font-family: 'Courier New', monospace;">ui.UIManager.layouts.myLayout 
 = {</p>
<p style="font-family: 'Courier New', monospace;">&#160;&#160;&#160;&#160;&quot;type&quot;: 
 &quot;ui.FreeLayout&quot;,</p>
<p style="font-family: 'Courier New', monospace;">&#160;&#160;&#160;&#160;&quot;component&quot;: 
 { &quot;ns&quot;: &quot;gs&quot;, &quot;className&quot;: &quot;Component_CustomLayoutBehavior 
 &quot; },</p>
<p style="font-family: 'Courier New', monospace;">&#160;&#160;&#160;&#160;....................</p>
<p style="font-family: 'Courier New', monospace;">}</p>
<p>&#160;</p>
<p>この場合、該当するレイアウトに切り替えると、カスタムのgs.Component_CustomLayoutBehaviorコンポーネントが使用されます。</p>
</body>
</html>
