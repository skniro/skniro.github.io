<!DOCTYPE HTML>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
 <meta name="generator" content="Adobe RoboHelp 2015" />
<title>Music &amp; Sounds</title>
<link rel="StyleSheet" href="default.css" type="text/css" />
<link rel="stylesheet" href="highlight/styles/default.css" type="text/css" />
<script src="highlight/highlight.pack.js" type="text/javascript">
</script>
<script type="text/javascript">
//<![CDATA[
hljs.initHighlightingOnLoad();
//]]>
</script>
<script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style>

<script type="text/javascript" src="template/scripts/rh.min.js"></script>
<script type="text/javascript" src="template/scripts/common.min.js"></script>
<script type="text/javascript" src="template/scripts/topic.min.js"></script>
<script type="text/javascript" src="template/scripts/constants.js"></script>
<script type="text/javascript" src="template/scripts/utils.js"></script>
<script type="text/javascript" src="template/scripts/mhutils.js"></script>
<script type="text/javascript" src="template/scripts/mhlang.js"></script>
<script type="text/javascript" src="template/scripts/mhver.js"></script>
<script type="text/javascript" src="template/scripts/settings.js"></script>
<script type="text/javascript" src="template/scripts/XmlJsReader.js"></script>
<script type="text/javascript" src="template/scripts/loadparentdata.js"></script>
<script type="text/javascript" src="template/scripts/loadscreen.js"></script>
<script type="text/javascript" src="template/scripts/loadprojdata.js"></script>
<script type="text/javascript" src="template/scripts/mhtopic.js"></script>
 <link rel="stylesheet" type="text/css" href="template/styles/topic.min.css">
<script type="text/javascript" >
gRootRelPath = ".";
gCommonRootRelPath = ".";
gTopicId = "4.1.0_9";
</script>
 <meta name="topic-breadcrumbs" content="Scripter's Guide > Basic Engine" />
</head>
<body>
<script type="text/javascript" src="./ehlpdhtm.js"></script>

<p class="Topic_Heading">Music &amp; Sounds</p>
<p>&#160;</p>
<p><span class="Topic_Start">W</span>ith VN Maker you can play music and sounds easily with volume, speed and pan control.</p>
<p>&#160;</p>
<p>&#160;</p>
<p class="Sub_Heading">Play a Sound</p>
<p>&#160;</p>
<p>A sound can be loaded using ResourceManager.getAudioBuffer which returns a gs.AudioBuffer object which can be easily played by calling it's play-method.</p>
<pre>
<code class="coffee">
# ===================================================================
#
#   Script: Component_TestBedBehavior
#
#   Put your name here
#
# ===================================================================
class Component_TestBedBehavior extends gs.Component_SceneBehavior
    ###*
    * A test bed scene behavior. Here you can play around with Visual Novel Maker's 
    * game engine to get a better feeling for everything.
    ###
    constructor: -&gt;
        super
        
        # Define resource context property
        @resourceContext = null
    
    ###*
    * Initializes the scene. 
    ###
    initialize: -&gt;
        super
        
        # Create a new resource context
        @resourceContext = ResourceManager.createContext()
        
        # Set current object manager
        gs.ObjectManager.current = SceneManager
        
        # Set it as the current resource context
        ResourceManager.context = @resourceContext
        
    ###*
    * Disposes the scene.
    ###  
    dispose: -&gt;
        super
    
    ###*
    * Prepares all visual game object for the scene.
    ###  
    prepareVisual: -&gt;
        # Start Screen Transition
        @transition()
        
    ###*
    * Prepares all data for the scene and loads the necessary graphic and audio resources.
    ### 
    prepareData: -&gt;
        # Load the sound
        @audioBuffer = ResourceManager.getAudioBuffer("Audio/Sounds/ambulance_siren")
        
    ###*
    * Update the scene's content.
    ###         
    updateContent: -&gt;
        # If a mouse-button gets released we will play the sound
        if Input.Mouse.buttonUp
            # Play the sound
            @audioBuffer.play()
        
gs.Component_LayoutSceneBehavior = Component_TestBedBehavior</code>
</pre>
<p>&#160;</p>
<p>If we test our game now and click on the screen, we can hear a sound.</p>
<p>&#160;</p>
<p class="Sub_Heading">Play the same sounds multiple times</p>
<p>&#160;</p>
<p>In our last example we just played a single sound. However, if we try to play that sound multiple times in parallel, like if we are click on the screen multiple times, we will see that it will work without any problems so far. Whenever we call the play-method of our audio-buffer object, the current sound stops and then re-plays. That's a big disadvantage for like shooting games where the shot-sound is played a lot of times in parallel. One thing we could do here is that we are just create multiple instances of gs.AudioBuffer with the same sound-file, but that would be a waste of memory.</p>
<p>&#160;</p>
<p>A much better solution is to use gs.AudioBufferReference class. It provides a similar set of methods as gs.AudioBuffer but the difference is that it's constructor takes an already existing gs.AudioBuffer object instead of creating a new one but still allows us to play the sound independent from other audio-buffer references. So instead of creating a bunch of gs.AudioBuffer objects with the same sound, we are creating a bunch of gs.AudioBufferReference objects referring to one audio-buffer object instead.</p>
<p>&#160;</p>
<p>Let's take a look at the following example.</p>
<p>&#160;</p>
<pre>
<code class="coffee">
# ===================================================================
#
#   Script: Component_TestBedBehavior
#
#   Put your name here
#
# ===================================================================
class Component_TestBedBehavior extends gs.Component_SceneBehavior
    ###*
    * A test bed scene behavior. Here you can play around with Visual Novel Maker's 
    * game engine to get a better feeling for everything.
    ###
    constructor: -&gt;
        super
        
        # Define resource context property
        @resourceContext = null
    
    ###*
    * Initializes the scene. 
    ###
    initialize: -&gt;
        super
        
        # Create a new resource context
        @resourceContext = ResourceManager.createContext()
        
        # Set current object manager
        gs.ObjectManager.current = SceneManager
        
        # Set it as the current resource context
        ResourceManager.context = @resourceContext
        
    ###*
    * Disposes the scene.
    ###  
    dispose: -&gt;
        super
    
    ###*
    * Prepares all visual game object for the scene.
    ###  
    prepareVisual: -&gt;
        # Create audio buffer reference 1
        @soundReference1 = new gs.AudioBufferReference(@audioBuffer)
        # Create audio buffer reference 2
        @soundReference2 = new gs.AudioBufferReference(@audioBuffer)
        # Start Screen Transition
        @transition()
        
    ###*
    * Prepares all data for the scene and loads the necessary graphic and audio resources.
    ### 
    prepareData: -&gt;
        # Load the sound
        @audioBuffer = ResourceManager.getAudioBuffer("Audio/Sounds/ambulance_siren")
        
        
    ###*
    * Update the scene's content.
    ###         
    updateContent: -&gt;
        # If a mouse-button gets released we will play the sound
        if Input.Mouse.buttonUp
            # Check if sthe original audio-buffer is not playing
            if not @audioBuffer.isPlaying
                # Play original audio buffer 
                @audioBuffer.play()
            # If original audio-buffer is already playing, check if reference-1 is not playing instead.
            else if not @soundReference1.isPlaying
                # Play reference-1
                @soundReference1.play()
            # If reference 1 is already playing too, check if reference-2 is not playing instead.
            else if not @soundReference2.isPlaying
                # Play reference-2
                @soundReference2.play()
        
gs.Component_LayoutSceneBehavior = Component_TestBedBehavior</code>
</pre>
<p>Now we have 2 audio-buffer references in addition to the original audio-buffer so we can play the same sound 3 times in parallel now. Try to click three times on the screen to see the difference. Of course, that kind of mechanism is already implemented in gs.AudioManager script. So using gs.AudioManager we can easily play as much sounds as we want using the playSound method.</p>
<p>&#160;</p>
<pre>
<code class="coffee">
# ===================================================================
#
#   Script: Component_TestBedBehavior
#
#   Put your name here
#
# ===================================================================
class Component_TestBedBehavior extends gs.Component_SceneBehavior
    ###*
    * A test bed scene behavior. Here you can play around with Visual Novel Maker's 
    * game engine to get a better feeling for everything.
    ###
    constructor: -&gt;
        super
        
        # Define resource context property
        @resourceContext = null
    
    ###*
    * Initializes the scene. 
    ###
    initialize: -&gt;
        super
        
        # Create a new resource context
        @resourceContext = ResourceManager.createContext()
        
        # Set current object manager
        gs.ObjectManager.current = SceneManager
        
        # Set it as the current resource context
        ResourceManager.context = @resourceContext
        
    ###*
    * Disposes the scene.
    ###  
    dispose: -&gt;
        super
    
    ###*
    * Prepares all visual game object for the scene.
    ###  
    prepareVisual: -&gt;
        # Start Screen Transition
        @transition()
        
    ###*
    * Prepares all data for the scene and loads the necessary graphic and audio resources.
    ### 
    prepareData: -&gt;
        # Load the sound
        gs.AudioManager.loadSound("ambulance_siren")
        
        
    ###*
    * Update the scene's content.
    ###         
    updateContent: -&gt;
        # If a mouse-button gets released we will play the sound
        if Input.Mouse.buttonUp
            # Play the sound
            gs.AudioManager.playSound("ambulance_siren", 100, 100)
        
gs.Component_LayoutSceneBehavior = Component_TestBedBehavior</code>
</pre>
<p>As we can see here, we no longer need to deal with gs.AudioBuffer and gs.AudioBufferReference directly. We can just call AudioManager.loadSound to load the sound and then easily play it with playSound.</p>
<p>&#160;</p>
<p class="Sub_Heading">Play Music</p>
<p>&#160;</p>
<p>To play a music file, we can just do the same as with sounds and use a gs.AudioBuffer object. But since music files are a lot larger in most cases, it is maybe not a good idea to load and decode them completely in memory before playing. Especially on some mobile devices that cloud result in long delays. Instead it is more recommend to stream the music-data. Streaming means that instead of loading the entire audio-file into memory, we only load and decode a small piece of it, then play that piece, free the memory and then load, decode and play the next piece. We can do that easily using gs.AudioBufferStream instead of gs.AudioBuffer.</p>
<p>&#160;</p>
<pre>
<code class="coffee">
# ===================================================================
#
#   Script: Component_TestBedBehavior
#
#   Put your name here
#
# ===================================================================
class Component_TestBedBehavior extends gs.Component_SceneBehavior
    ###*
    * A test bed scene behavior. Here you can play around with Visual Novel Maker's 
    * game engine to get a better feeling for everything.
    ###
    constructor: -&gt;
        super
        
        # Define resource context property
        @resourceContext = null
    
    ###*
    * Initializes the scene. 
    ###
    initialize: -&gt;
        super
        
        # Create a new resource context
        @resourceContext = ResourceManager.createContext()
        # Set current object manager
        gs.ObjectManager.current = SceneManager
        # Set it as the current resource context
        ResourceManager.context = @resourceContext
        
    ###*
    * Disposes the scene.
    ###  
    dispose: -&gt;
        super
    
    ###*
    * Prepares all visual game object for the scene.
    ###  
    prepareVisual: -&gt;
        # Start Screen Transition
        @transition()
        
    ###*
    * Prepares all data for the scene and loads the necessary graphic and audio resources.
    ### 
    prepareData: -&gt;
        # Load the music
        @audioStream = ResourceManager.getAudioStream("Audio/Music/Tutorial_-_Good_Mood")
        
        
    ###*
    * Update the scene's content.
    ###         
    updateContent: -&gt;
        # If a mouse-button gets released we will play the music
        if Input.Mouse.buttonUp
            # Play the music
            @audioStream.play()
        
gs.Component_LayoutSceneBehavior = Component_TestBedBehavior</code>
</pre>
<p>If we test our game now, we will hear some background music playing. But the recommended way is to use gs.AudioManager like in the following example.</p>
<pre>
<code class="coffee">
###*
* Prepares all data for the scene and loads the necessary graphic and audio resources.
### 
prepareData: -&gt;
    # Load the music
    gs.AudioManager.loadMusic("Tutorial_-_Good_Mood")
    
    
###*
* Update the scene's content.
###         
updateContent: -&gt;
    # If a mouse-button gets released we will play the music
    if Input.Mouse.buttonUp
        # Play the music
        gs.AudioManager.playMusic("Tutorial_-_Good_Mood", 100, 100)</code>
</pre>
<p>&#160;</p>
<p>&#160;</p>
<p>&#160;</p>
</body>
</html>
