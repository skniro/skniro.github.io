<!DOCTYPE HTML>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
 <meta name="generator" content="Adobe RoboHelp 2015" />
<title>Example: Custom Layout Behavior</title>
<link rel="StyleSheet" href="default.css" type="text/css" />
<link rel="stylesheet" href="highlight/styles/default.css" type="text/css" />
<script src="highlight/highlight.pack.js" type="text/javascript">
</script>
<script type="text/javascript">
//<![CDATA[
hljs.initHighlightingOnLoad();
//]]>
</script>
<script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style>

<script type="text/javascript" src="template/scripts/rh.min.js"></script>
<script type="text/javascript" src="template/scripts/common.min.js"></script>
<script type="text/javascript" src="template/scripts/topic.min.js"></script>
<script type="text/javascript" src="template/scripts/constants.js"></script>
<script type="text/javascript" src="template/scripts/utils.js"></script>
<script type="text/javascript" src="template/scripts/mhutils.js"></script>
<script type="text/javascript" src="template/scripts/mhlang.js"></script>
<script type="text/javascript" src="template/scripts/mhver.js"></script>
<script type="text/javascript" src="template/scripts/settings.js"></script>
<script type="text/javascript" src="template/scripts/XmlJsReader.js"></script>
<script type="text/javascript" src="template/scripts/loadparentdata.js"></script>
<script type="text/javascript" src="template/scripts/loadscreen.js"></script>
<script type="text/javascript" src="template/scripts/loadprojdata.js"></script>
<script type="text/javascript" src="template/scripts/mhtopic.js"></script>
 <link rel="stylesheet" type="text/css" href="template/styles/topic.min.css">
<script type="text/javascript" >
gRootRelPath = ".";
gCommonRootRelPath = ".";
gTopicId = "5.3.1.0_9";
</script>
 <meta name="topic-breadcrumbs" content="Script and Plugin Reference > In-Game UI Documentation > Getting Started" />
</head>
<body>
<script type="text/javascript" src="./ehlpdhtm.js"></script>

<p class="Topic_Heading">Example: Custom Layout Behavior</p>
<p>&#160;</p>
<p><span class="Topic_Start">T</span>here might be reasons for you that you want to take full control over a certain In-Game UI layout. In that case, you can create a custom layout behavior component and just inherit from gs.Component_LayoutSceneBehavior class.</p>
<p>&#160;</p>
<p><span style="font-weight: bold;">NOTE:</span> It is recommended to read the entire <a href="Scripter_s_Guide.htm">Scripter's Guide</a> first before trying to implement a custom layout behavior.</p>
<p>&#160;</p>
<pre>
<code class="coffee">
class Component_CustomLayoutBehavior extends gs.Component_LayoutSceneBehavior
    ###*
    * An example of how to create your own custom layout behavior to take full control
    * over the in-game ui scene.
    *
    * @module gs
    * @class Component_CustomLayoutBehavior 
    * @extends gs.Component_LayoutSceneBehavior
    * @memberof gs
    ###
    constructor: -&gt;
        super
    
    ###*
    * Initializes the in-game ui scene. 
    *
    * @method initialize
    ### 
    initialize: -&gt;
        super
        
    ###*
    * Prepares all visual game objects for the scene.
    *
    * @method prepareVisual
    ### 
    prepareVisual: -&gt;
        super
        
        # Easily access your UI game objects and do what you want with them.
        @myUiObject = gs.ObjectManager.current.objectById("myUiObject")
      
    ###*
    * Prepares all data for the scene and loads the necessary graphic and audio resources.
    *
    * @method prepareData
    ###   
    prepareData: -&gt;
        super
        
    ###*
    * Update the scene's content. Here you can implement any kind of additional logic
    * you want.
    *
    * @method updateContent
    ### 
    updateContent: -&gt;
        super
        
gs.Component_CustomLayoutBehavior = Component_CustomLayoutBehavior </code>
</pre>
<p>If you want to use your custom layout behavior for a certain layout, you can use the "component" property to specify the component-class to use for that layout.</p>
<p>&#160;</p>
<p style="font-family: 'Courier New', monospace;">ui.UIManager.layouts.myLayout = {</p>
<p style="font-family: 'Courier New', monospace;">&#160;&#160;&#160;&#160;"type": "ui.FreeLayout",</p>
<p style="font-family: 'Courier New', monospace;">&#160;&#160;&#160;&#160;"component": { "ns": "gs", "className": "Component_CustomLayoutBehavior " },</p>
<p style="font-family: 'Courier New', monospace;">&#160;&#160;&#160;&#160;....................</p>
<p style="font-family: 'Courier New', monospace;">}</p>
<p>&#160;</p>
<p>In that case, if you switch to that layout, it will use your custom gs.Component_CustomLayoutBehavior component.</p>
</body>
</html>
