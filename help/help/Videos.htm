<!DOCTYPE HTML>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
 <meta name="generator" content="Adobe RoboHelp 2015" />
<title>Videos</title>
<link rel="StyleSheet" href="default.css" type="text/css" />
<link rel="stylesheet" href="highlight/styles/default.css" type="text/css" />
<script src="highlight/highlight.pack.js" type="text/javascript">
</script>
<script type="text/javascript">
//<![CDATA[
hljs.initHighlightingOnLoad();
//]]>
</script>
<script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style>

<script type="text/javascript" src="template/scripts/rh.min.js"></script>
<script type="text/javascript" src="template/scripts/common.min.js"></script>
<script type="text/javascript" src="template/scripts/topic.min.js"></script>
<script type="text/javascript" src="template/scripts/constants.js"></script>
<script type="text/javascript" src="template/scripts/utils.js"></script>
<script type="text/javascript" src="template/scripts/mhutils.js"></script>
<script type="text/javascript" src="template/scripts/mhlang.js"></script>
<script type="text/javascript" src="template/scripts/mhver.js"></script>
<script type="text/javascript" src="template/scripts/settings.js"></script>
<script type="text/javascript" src="template/scripts/XmlJsReader.js"></script>
<script type="text/javascript" src="template/scripts/loadparentdata.js"></script>
<script type="text/javascript" src="template/scripts/loadscreen.js"></script>
<script type="text/javascript" src="template/scripts/loadprojdata.js"></script>
<script type="text/javascript" src="template/scripts/mhtopic.js"></script>
 <link rel="stylesheet" type="text/css" href="template/styles/topic.min.css">
<script type="text/javascript" >
gRootRelPath = ".";
gCommonRootRelPath = ".";
gTopicId = "4.1.0_6";
</script>
 <meta name="topic-breadcrumbs" content="Scripter's Guide > Basic Engine" />
</head>
<body>
<script type="text/javascript" src="./ehlpdhtm.js"></script>

<p class="Topic_Heading">Videos</p>
<p>&#160;</p>
<p><span class="Topic_Start">V</span>isual Novel Maker makes it very easy to load and display videos on screen. You can load and display as many videos as you like at the same time and also adding effects such as rotation, zooming or color-tinting.</p>
<p>&#160;</p>
<p class="Sub_Heading">Play a Video</p>
<p>&#160;</p>
<p>Videos are represented by the gs.Video objects and can be loaded using gs.ResourceManager.getVideo method. A gs.Video object has no knowledge about how to display itself on screen directly. So to display a video, we need to use a gs.Sprite object. The overall process is very similar to gs.Bitmap objects. The following example displays a video on screen:</p>
<p>&#160;</p>
<pre>
<code class="coffee">
###*
* Prepares all visual game object for the scene.
###  
prepareVisual: -&gt;
    # Create a new sprite object to show our video on screen.
    @sprite = new gs.Sprite(Graphics.viewport)
    # Assign our video to the sprite to display it on screen
    @sprite.video = @video
    # Setup the position on screen. We make it centered.
    @sprite.x = (Graphics.width - @video.width) / 2
    @sprite.y = (Graphics.height - @video.height) / 2
    # Define the portion of the video we want to display on screen.
    @sprite.srcRect = new gs.Rect(0, 0, @video.width, @video.height)
    
    # Start the video playback. Otherwise wew ill only see the first frame
    # of the video.
    @video.play()
    # We are done with preparing our visual objects. So we can start
    # the screen transition to fade in our new created objects smoothly.
    @transition()
    
###*
* Prepares all data for the scene and loads the necessary graphic and audio resources.
### 
prepareData: -&gt;
    # Load the video "fog.webmhd"
    @video = ResourceManager.getVideo("Movies/fog.webmhd")
    # Enable looping so the video will repeat non-stop.
    @video.loop = yes
###*
* Update the scene's content.
###         
updateContent: -&gt;
    # Update the video rendering.
    @video.update()</code>
</pre>
<p>&#160;</p>
<p>As we can see, we are just assigning the video object to the video-property of the sprite object. Alternatively, we can also assign the video object to the bitmap-property, that makes no difference. But it is recommended to use the video-property.</p>
<p>&#160;</p>
<p>Since we use a gs.Sprite object to display the video, we can use all functions and effects a sprite provides for our video easily. A difference from regular bitmaps is that we have to call the update-method of the video once per frame to update the video-rendering. If you stop calling the update-method, the video is still playing in the background but looks frozen on the screen. Also, it is important to call the play-method after the video is loaded to start the video-rendering.</p>
<p>&#160;</p>
<p>&#160;</p>
<p class="Sub_Heading">Tablets &amp; Smartphones</p>
<p>&#160;</p>
<p>If you plan to publish your game on mobile devices such as Android or iOS devices, we recommended to not rely on videos too much. Some devices still have problems with the high memory and performance consumption of videos rendered via OpenGL.</p>
</body>
</html>
