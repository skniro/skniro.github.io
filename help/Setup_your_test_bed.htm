<!DOCTYPE HTML>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
 <meta name="generator" content="Adobe RoboHelp 2015" />
<title>Setup your test bed</title>
<link rel="StyleSheet" href="default.css" type="text/css" />
<link rel="stylesheet" href="highlight/styles/default.css" type="text/css" />
<script src="highlight/highlight.pack.js" type="text/javascript">
</script>
<script type="text/javascript">
//<![CDATA[
hljs.initHighlightingOnLoad();
//]]>
</script>
<script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style>

<script type="text/javascript" src="template/scripts/rh.min.js"></script>
<script type="text/javascript" src="template/scripts/common.min.js"></script>
<script type="text/javascript" src="template/scripts/topic.min.js"></script>
<script type="text/javascript" src="template/scripts/constants.js"></script>
<script type="text/javascript" src="template/scripts/utils.js"></script>
<script type="text/javascript" src="template/scripts/mhutils.js"></script>
<script type="text/javascript" src="template/scripts/mhlang.js"></script>
<script type="text/javascript" src="template/scripts/mhver.js"></script>
<script type="text/javascript" src="template/scripts/settings.js"></script>
<script type="text/javascript" src="template/scripts/XmlJsReader.js"></script>
<script type="text/javascript" src="template/scripts/loadparentdata.js"></script>
<script type="text/javascript" src="template/scripts/loadscreen.js"></script>
<script type="text/javascript" src="template/scripts/loadprojdata.js"></script>
<script type="text/javascript" src="template/scripts/mhtopic.js"></script>
 <link rel="stylesheet" type="text/css" href="template/styles/topic.min.css">
<script type="text/javascript" >
gRootRelPath = ".";
gCommonRootRelPath = ".";
gTopicId = "4.0_1";
</script>
 <meta name="topic-breadcrumbs" content="Scripter's Guide" />
</head>
<body>
<script type="text/javascript" src="./ehlpdhtm.js"></script>

<p class="Topic_Heading">Setup a Test Bed</p>
<p>&#160;</p>
<p><span class="Topic_Start">T</span>he first thing to do before starting with actual scripting in Visual Novel Maker is to setup your own test bed. There you can play around with Visual Novel Maker's engine and try out different things quickly.</p>
<p>&#160;</p>
<ul style="list-style: disc;">
<li>To setup your test bed, open <span style="font-family: Arial, sans-serif; font-weight: bold;"><img src="icon_code_edit.png" alt="" style=" border:none; max-width:16px; width:100%;" border="0" /></span><span style="font-weight: bold;"><a href="GameScript_Getting_Started.htm" style="font-weight: bold;">Script Editor</a>.</span></li>
<li>Right Click Components &gt; Scenes folder and select <img src="icon_code_beanshell_new.png" alt="" style=" border:none; width:100%; max-width:16px;" border="0" /><span style="font-weight: bold; font-family: Arial, sans-serif;">New CoffeeScript File</span>...</li>
<li>Enter "Component_TestBedBehavior" as Name</li>
</ul>
<p>&#160;</p>
<p>Put the following code:</p>
<pre>
<code class="coffee"># ===================================================================
#
#   Script: Component_TestBedBehavior
#
#   Put your name here
#
# ===================================================================
class Component_TestBedBehavior extends gs.Component_SceneBehavior
    ###*
    * A test bed scene behavior. Here you can play around with Visual Novel Maker's 
    * game engine to get a better feeling for everything.
    ###
    constructor: -&gt;
        super()
    ###*
    * Initializes the scene. 
    ###
    initialize: -&gt;
        super
    ###*
    * Disposes the scene.
    ###  
    dispose: -&gt;
        super
        
    ###*
    * Prepares all visual game objects for the scene.
    ###  
    prepareVisual: -&gt;
        
    ###*
    * Prepares all data for the scene and loads the necessary graphic and audio resources.
    ### 
    prepareData: -&gt;
    
    ###*
    * Update the scene's content.
    ###         
    updateContent: -&gt;
    
gs.Component_LayoutSceneBehavior = Component_TestBedBehavior</code>
</pre>
<p>Into the new created script file and save your project. If you play your game now, you will only see a black screen. That is correct in this case, because what you see is your test bed which just has no content yet.</p>
<p>&#160;</p>
<p style="text-align: center;"><img src="Metisnotes12_en.png" alt="" style=" border:none; width:100%; max-width:465px;" border="0" /></p>
<p>&#160;</p>
<p class="Sub_Heading">Scene Workflow</p>
<p>&#160;</p>
<p style="font-weight: bold;">initialize</p>
<p>In this method you can initialize your scene as well as loading documents or resources.</p>
<p>&#160;</p>
<p style="font-weight: bold;">prepareVisual</p>
<p>In this method you can prepare/create your visual objects. Like Sprites, Texts, In-Game UI, etc. If this method is called, all requested resources and documents are loaded. You can trigger the load of additional resources in this method too, in that case, this method is called again once these resources are loaded.</p>
<p>&#160;</p>
<p style="font-weight: bold;">prepareData</p>
<p>In this method you can prepare your non-visual objects, loading resources, etc. If this method is called, all documents requested in initialize method are loaded. You can load additional documents in this method too, in that case, this method is called again once these documents are loaded.</p>
<p>&#160;</p>
<p style="font-weight: bold;">updateContent</p>
<p>This method is called once per frame. You can move your objects on screen here or do animations.</p>
<p>&#160;</p>
<p class="Sub_Heading">Display a red square on screen</p>
<p>&#160;</p>
<p>To check if your test bed is really working, we will now change our code a little bit to show a red square on the screen. Doesn't sound like an amazing thing, but in later chapters of this guide we will do a lot more.</p>
<p>&#160;</p>
<p>Since a red square counts as a visual object on screen, we have to change the prepareVisual method so that it looks like this:</p>
<pre>
<code class="coffee">
###*
* Prepares all visual game object for the scene.
###  
prepareVisual: -&gt;
    # Create a new quad graphic object.
    @quad = new gs.Quad(Graphics.viewport)
    
    # Setup the size of the rectangle
    @quad.rect.width = 100
    @quad.rect.height = 100
    
    # Setup the position on screen. We make it centered.
    @quad.rect.x = (Graphics.width - @quad.rect.width) / 2
    @quad.rect.y = (Graphics.height - @quad.rect.height) / 2
    
    # Set the color of the rectangle.
    @quad.color.set(255, 0, 0, 255)
    
    # We are done with preparing our visual objects. So we can start
    # the screen transition to fade in our new created objects smoothly.
    @transition()</code>
</pre>
<p>If you play your game now, you will see a red square in the center of the screen. We are using the gs.Quad class here which is part of the Basic Engine. You can read more about gs.Quad in the <a href="Engine_Getting_Started.htm">Engine API documentation.</a></p>
<p>&#160;</p>
<p>Important is also the last line where the transition method is called. That is necessary because in prepareVisual, the screen is frozen, so no matter what kind of changes we are doing, we will see nothing until we unfreeze the screen. To avoid that this unfreeze happens instantly but smoothly instead, we are calling transition() which will unfreeze and fade-in our new created red square smoothly.</p>
<p>&#160;</p>
<p>Feel free to change this example, you can take a look into the Engine API documentation and play around with other visual objects.</p>
<p>&#160;</p>
</body>
</html>
